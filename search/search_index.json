{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Getting Started This repository of notes is intended for quick reference, especially for beginners. This is not a textbook. Focus of each note is to provide minimal, dense, clutterfree info for the reader to get started. Step 1: Setting up First you need to have a clean linux operating system setup. You can install Ubuntu 20.04 on VirtualBox or VMWare workstation if you have a laptop with 4-8GB RAM. Install Visual Studio Code or any other code editor you prefer. Install Git on your laptop. Sign up for an account on Github. Then setup SSH access. Step 2: Working locally Fork the original repository to your own account. Clone your forked repository to your laptop. Install python-virtualenv and setup a virtualenv with name 'venv' in the code folder. Activate the virtualenv and install the pip dependencies . Start the local development server with: mkdocs serve Step 3: Submit a pull request Open the folder in the editor. Understand how material for mkdocs works. Make edits in the docs folder to edit the contents. Navigate to your local deployment to test the changes. Keep making changes till you are satisfied. Then commit the changes . Push to your github account with git push . Navigate to the forked repository in your github account using your browser and submit a pull request to the original repository. Raise a github issue on the original repository , if you face any issues.","title":"Getting started"},{"location":"#getting-started","text":"This repository of notes is intended for quick reference, especially for beginners. This is not a textbook. Focus of each note is to provide minimal, dense, clutterfree info for the reader to get started.","title":"Getting Started"},{"location":"#step-1-setting-up","text":"First you need to have a clean linux operating system setup. You can install Ubuntu 20.04 on VirtualBox or VMWare workstation if you have a laptop with 4-8GB RAM. Install Visual Studio Code or any other code editor you prefer. Install Git on your laptop. Sign up for an account on Github. Then setup SSH access.","title":"Step 1: Setting up"},{"location":"#step-2-working-locally","text":"Fork the original repository to your own account. Clone your forked repository to your laptop. Install python-virtualenv and setup a virtualenv with name 'venv' in the code folder. Activate the virtualenv and install the pip dependencies . Start the local development server with: mkdocs serve","title":"Step 2: Working locally"},{"location":"#step-3-submit-a-pull-request","text":"Open the folder in the editor. Understand how material for mkdocs works. Make edits in the docs folder to edit the contents. Navigate to your local deployment to test the changes. Keep making changes till you are satisfied. Then commit the changes . Push to your github account with git push . Navigate to the forked repository in your github account using your browser and submit a pull request to the original repository. Raise a github issue on the original repository , if you face any issues.","title":"Step 3: Submit a pull request"},{"location":"basics/","text":"Basics: Overview Each point in this page needs to be converted to a separate note. Please contribute with a pull request. Operating System Installing a functional UNIX/Linux operating system. Getting an overview of the filesystem Understanding file permissions, users & PATH Installing software packages that you need Command Line ls, cp, mv, rm, mkdir, rmdir, chmod, cat, export . .. | > >> & grep, find, sh, ps, top, less, tail, alias ssh, scp Git Typical workflow in Git Creating account on github with SSH access git basics: clone, pull, status, diff, add, commit, reset, push Working with branches: checkout, rebase, merge Others Markdown mkdocs","title":"Overview"},{"location":"basics/#basics-overview","text":"Each point in this page needs to be converted to a separate note. Please contribute with a pull request.","title":"Basics: Overview"},{"location":"basics/#operating-system","text":"Installing a functional UNIX/Linux operating system. Getting an overview of the filesystem Understanding file permissions, users & PATH Installing software packages that you need","title":"Operating System"},{"location":"basics/#command-line","text":"ls, cp, mv, rm, mkdir, rmdir, chmod, cat, export . .. | > >> & grep, find, sh, ps, top, less, tail, alias ssh, scp","title":"Command Line"},{"location":"basics/#git","text":"Typical workflow in Git Creating account on github with SSH access git basics: clone, pull, status, diff, add, commit, reset, push Working with branches: checkout, rebase, merge","title":"Git"},{"location":"basics/#others","text":"Markdown mkdocs","title":"Others"},{"location":"guidelines/","text":"Guidelines Composing a note Don't explain in detail. Keep the info concise. Each point must not be more than 3-4 sentences. Add links to external sources for elaborate reading. But summarize the external source in the note. Link to other docs whenever possible. As this repository is built for reference, each note may be read independently. Having a quick link to another note that clarifies a concept or gives background is very helpful. Submitting a pull request","title":"Guidelines"},{"location":"guidelines/#guidelines","text":"","title":"Guidelines"},{"location":"guidelines/#composing-a-note","text":"Don't explain in detail. Keep the info concise. Each point must not be more than 3-4 sentences. Add links to external sources for elaborate reading. But summarize the external source in the note. Link to other docs whenever possible. As this repository is built for reference, each note may be read independently. Having a quick link to another note that clarifies a concept or gives background is very helpful.","title":"Composing a note"},{"location":"guidelines/#submitting-a-pull-request","text":"","title":"Submitting a pull request"},{"location":"stuck/","text":"Getting Stuck Stuckness shouldn't be avoided. It's the psychic predecessor of all real understanding. An egoless acceptance of stuckness is a key to an understanding of all Quality, in mechanical work as in other endeavors. It's this understanding of Quality as revealed by stuckness which so often makes self-taught mechanics so superior to institute-trained men who have learned how to handle everything except a new situation. -- Zen and the art of motorcycle maintenance (Robert M. Pirsig) This is where the real fun begins. Google Always, the first thing to do when stuck is ask google. Google for: error messages, keywords, describing the problem. Google in 5-6 different ways. Don't expect exact solutions. Look for posts that explain what is going on, so that you can understand enough to solve your issue. Stackoverflow results are most useful. Documentation sites next. Github issue discussions third. Finally personal blogs. Experiment As you keep learning more from googling, try experimenting on your own as well. Add print messages generously. This is the direct and most useful method. If you're on the browser, open developer tools and setup breakpoints. Try breaking your change into smaller changes and go step by step to see which step is the issue. Keep commits as small as possible. Even single lines. Test before every commit. So, that when you have an error, you have a smaller surface area for the bug to hide. When you are not sure what is happening under the hood, experiment to understand even if there is no bug. That understanding will pay disproportionately in the long run. Experimenting is the most fun way of learning things. Get out of the box Switch off for the day and start afresh the next day. Try to explain your problem to a friend. Just going over the problem again help see something you might have missed or come up with new ideas. Write a note on what got you stuck and the approaches you tried. Ask for help As a last effort, if you can't find any info through google and your own experiments haven't been insightful, you can ask for help. But, 99.99% of the time, this shouldn't be needed.","title":"Getting stuck"},{"location":"stuck/#getting-stuck","text":"Stuckness shouldn't be avoided. It's the psychic predecessor of all real understanding. An egoless acceptance of stuckness is a key to an understanding of all Quality, in mechanical work as in other endeavors. It's this understanding of Quality as revealed by stuckness which so often makes self-taught mechanics so superior to institute-trained men who have learned how to handle everything except a new situation. -- Zen and the art of motorcycle maintenance (Robert M. Pirsig) This is where the real fun begins.","title":"Getting Stuck"},{"location":"stuck/#google","text":"Always, the first thing to do when stuck is ask google. Google for: error messages, keywords, describing the problem. Google in 5-6 different ways. Don't expect exact solutions. Look for posts that explain what is going on, so that you can understand enough to solve your issue. Stackoverflow results are most useful. Documentation sites next. Github issue discussions third. Finally personal blogs.","title":"Google"},{"location":"stuck/#experiment","text":"As you keep learning more from googling, try experimenting on your own as well. Add print messages generously. This is the direct and most useful method. If you're on the browser, open developer tools and setup breakpoints. Try breaking your change into smaller changes and go step by step to see which step is the issue. Keep commits as small as possible. Even single lines. Test before every commit. So, that when you have an error, you have a smaller surface area for the bug to hide. When you are not sure what is happening under the hood, experiment to understand even if there is no bug. That understanding will pay disproportionately in the long run. Experimenting is the most fun way of learning things.","title":"Experiment"},{"location":"stuck/#get-out-of-the-box","text":"Switch off for the day and start afresh the next day. Try to explain your problem to a friend. Just going over the problem again help see something you might have missed or come up with new ideas. Write a note on what got you stuck and the approaches you tried.","title":"Get out of the box"},{"location":"stuck/#ask-for-help","text":"As a last effort, if you can't find any info through google and your own experiments haven't been insightful, you can ask for help. But, 99.99% of the time, this shouldn't be needed.","title":"Ask for help"},{"location":"basics/markdown/","text":"Markdown What is Markdown? Lightweight markup language with a plain text formatting syntax. Can be converted into HTML/XHTML and other formats. It's main purpose is readability and ease of use. What is it used for? Readme Files(Github,etc) Forum & Blog Posts Used in many Static Site Generators. To know more you can follow these links: Markdown Crash Course Markdown Guide Markdown Cheat Sheet Wikipedia","title":"Markdown"},{"location":"basics/markdown/#markdown","text":"","title":"Markdown"},{"location":"basics/markdown/#what-is-markdown","text":"Lightweight markup language with a plain text formatting syntax. Can be converted into HTML/XHTML and other formats. It's main purpose is readability and ease of use.","title":"What is Markdown?"},{"location":"basics/markdown/#what-is-it-used-for","text":"Readme Files(Github,etc) Forum & Blog Posts Used in many Static Site Generators.","title":"What is it used for?"},{"location":"basics/markdown/#to-know-more-you-can-follow-these-links","text":"Markdown Crash Course Markdown Guide Markdown Cheat Sheet Wikipedia","title":"To know more you can follow these links:"},{"location":"basics/mkdocs/","text":"MkDocs: What is MkDocs and what is it used for? MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Go through the following links to get started Getting Started User Guide Important things to learn: Basic structure of MkDocs. About the docs folder mkdocs.yaml file site name & url, repo url & name nav - used to create the navigation for the documentation. theme, Material in this documentation. mkdocs commands helpful video workflow of mkdocs Material Material for mkdocs is a custom theme used in this documentation. To get started click here. A video on Material for mkdocs","title":"mkdocs"},{"location":"basics/mkdocs/#mkdocs","text":"","title":"MkDocs:"},{"location":"basics/mkdocs/#what-is-mkdocs-and-what-is-it-used-for","text":"MkDocs is a fast, simple and downright gorgeous static site generator that's geared towards building project documentation. Documentation source files are written in Markdown, and configured with a single YAML configuration file. Go through the following links to get started Getting Started User Guide","title":"What is MkDocs and what is it used for?"},{"location":"basics/mkdocs/#important-things-to-learn","text":"Basic structure of MkDocs. About the docs folder mkdocs.yaml file site name & url, repo url & name nav - used to create the navigation for the documentation. theme, Material in this documentation. mkdocs commands helpful video workflow of mkdocs","title":"Important things to learn:"},{"location":"basics/mkdocs/#material","text":"Material for mkdocs is a custom theme used in this documentation. To get started click here.","title":"Material"},{"location":"basics/mkdocs/#a-video-on-material-for-mkdocs","text":"","title":"A video on Material for mkdocs"}]}